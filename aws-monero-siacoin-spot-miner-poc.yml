AWSTemplateFormatVersion: '2010-09-09'

Description: |
  This is a POC (Proof Of Concept) for benchmarking hashrates when simultaneously mining Siacoin and Monero cryptocurrenices on AWS spot instances.
  Mining Siacoin and Monero on AWS is not profitable and this template should only be used for benchmarking and/or other educational activities.

# Help for CloudFormation Metadata
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: SIACOIN & MONERO INFORMATION
      Parameters:
      - SiaCoinAddr
      - SiacoinMiningPool
      - MoneroCoinAddr
      - MoneroMiningPool
    - Label:
        default: SPOT INSTANCES
      Parameters:
      - NumOfSpots
      - GPUType
      - SpotPrice
      - WorkerName
    - Label:
        default: MINER INSTANCE TYPE
      Parameters:
      - InstanceSize
      - MinerIntensity
      - ChooseVPC
      - KeyName
    - Label:
        default: SECURITY
      Parameters:
      - SSHAccessIP
    ParameterLabels:
      SiaCoinAddr:
        default: Siacoin Wallet Address
      SiacoinMiningPool:
        default: Siacoin Mining Pool
      MoneroCoinAddr:
        default: Monero Wallet Address
      MoneroMiningPool:
        default: Monero Mining Pool
      NumOfSpots:
        default: Number of Spot Instances
      GPUType:
        default: Type of GPU to Use
      SpotPrice:
        default: Bid Price
      WorkerName:
        default: Worker Name
      InstanceSize:
        default: Instance Size
      MinerIntensity:
        default: Miner Intensity
      ChooseVPC:
        default: Choose a VPC
      KeyName:
        default: EC2 Key Pair
      SSHAccessIP:
        default: Restrict SSH To
# Help for CloudFormation Parameters
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  SiaCoinAddr:
    Description: Leave my address to donate while you test -OR- enter YOUR Siacoin wallet address here.
    Type: String
    Default: 7b72309d6144b042599c08eed5fe51bd78bfcdc1210971cffc6c8987fdf4c6252ca2b299ffd3
  SiacoinMiningPool:
    Description: "Select a Siacoin mining pool. If you aren't sure which to select keep the default. Help can be found here: https://siamining.com/help"
    Type: String
    Default: siamining.com:3333
    AllowedValues:
    - siamining.com:3333
    - asia.siamining.com:3333
    - eu.siamining.com:3333
    - us-east.siamining.com:3333
    - us-west.siamining.com:3333
  MoneroCoinAddr:
    Description: Leave my address to donate while you test -OR- enter YOUR Monero wallet address here.
    Type: String
    Default: 4JUdGzvrMFDWrUUwY3toJATSeNwjn54LkCnKBPRzDuhzi5vSepHfUckJNxRL2gjkNrSqtCoRUrEDAgRwsQvVCjZbS3Pec2368ZCET3XDFN
  MoneroMiningPool:
    Description: Enter your Monero mining pool. Make sure you have the correct address and port. (eg. the.domain.name:port)
    Type: String
    Default: mine.xmrpool.net:3333
  NumOfSpots:
    Description: Select a number of spot instances to bid for. You will be charged for any instances that start. AWS typically limits a region to 20 instances depending on the instance type but you can request an increase.
    Type: Number
    Default: 1
    AllowedValues:  
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15
    - 16
    - 17
    - 18
    - 19
    - 20
  # This is redundant as CloudFormation has a !Split function that we could use in the InstanceSize parameter below
  # but unfortunately, it doesn't appear to be possible to use INSIDE a FindInMap function.
  GPUType:
    Description: "Select an AWS GPU family. Note that Ohio (us-east-2) only supports p2; Singapore (ap-southeast-1), Frankfurt (eu-central-1), N. California (us-west-1) only support g2."
    Type: String
    Default: p2
    AllowedValues:  
    - p2
    - g2
  SpotPrice:
    Description: "Enter a your spot bid amount. Current prices listed at: https://aws.amazon.com/ec2/spot/pricing/"
    Type: String
    Default: 0.25
    AllowedPattern: "(\\d{1})\\.(\\d{1,3})"
  WorkerName:
    Description: Enter a worker name to identify hashing efforts.
    Type: String
    Default: AWS-SPOT-MINER
  InstanceSize:
    Description: Choose either a p2 or g2 instance type.
    Type: String
    Default: p2.xlarge
    AllowedValues:
    - g2.2xlarge
    - p2.xlarge
  MinerIntensity:
    Description: Select miner intensity for marlin. Keep the default of 28 if not sure.
    Type: String
    Default: 28
  ChooseVPC:
    Description: REQUIRED - Select an EXISTING VPC to launch your Siacoin miner instances.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: You must choose the name of an existing VPC ID.
  KeyName:
    Description: REQUIRED - Select an EXISTING EC2 key pair to launch your Siacoin miner instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: You must choose the name of an existing EC2 KeyPair
  SSHAccessIP:
    Description: Enter your source IP for SSH access. Use http://ipchicken.com if not sure. Note that 0.0.0.0/0 isn't allowed to protect yourself from yourself.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default : 0.0.0.0/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(/32)"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/32
# Help for CloudFormation Mappings
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  RegionMap:     
    # EU (Ireland)
    eu-west-1:
      # Redundant to have same AMI but could be useful in future if AMI should be different for each GPU family type.
      p2: ami-ed947194
      g2: ami-ed947194
    # Asia Pacific (Tokyo)
    ap-northeast-1:
      p2: ami-4e0e1f29
      g2: ami-4e0e1f29         
    # Asia Pacific (Sydney)
    ap-southeast-2:
      p2: ami-e77c6f84
      g2: ami-e77c6f84 
    # US East (N. Virginia)
    us-east-1:
      p2: ami-c5eadcd3
      g2: ami-c5eadcd3
    # US East (Ohio) - only supports p2 family.
    us-east-2:
      p2: ami-c8f3a8ad
    # US West (Oregon)
    us-west-2:
      p2: ami-aaebfcd3
      g2: ami-aaebfcd3
    # Asia Pacific (Singapore) - only supports g2 family.
    ap-southeast-1:
      g2: ami-f35cd290
    # Asia Pacific (Sydney)
    ap-southeast-2:
      p2: ami-e77c6f84
      g2: ami-e77c6f84    
    # EU (Frankfurt) - only supports g2 family.
    eu-central-1:
      g2: ami-cf3294a0    
    # US West (N. California) - only supports g2 family.
    us-west-1:
      g2: ami-68002c08
Resources:
  SpotFleet:
    DependsOn:
      - MinerInstanceProfile
      - MinerInstanceRole
      - MinerInstanceSSG
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        # Help on SpotFleetRequestConfigData: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html
        AllocationStrategy: lowestPrice
        IamFleetRole: !GetAtt [SpotFleetRole, Arn]
        SpotPrice:
          Ref: SpotPrice
        TargetCapacity:
          Ref: NumOfSpots
        LaunchSpecifications:
          # This MUST be the Arn and is different from the AWS::EC2::Instance resource version of IamInstanceProfile: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-iaminstanceprofile.html
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - MinerInstanceProfile
              - Arn
          InstanceType:
            Ref: InstanceSize
          KeyName:
            Ref: KeyName
          # It might be worth pointing out that you cannot use !If in a !FindInMap, only !Ref: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-findinmap.html
          # You also cannot use !Select and !Split within !FindInMap which is lame: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-split.html
          ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", !Ref GPUType]
          # SubnetID is not required and we want the spot bid to choose the cheapest AZ automatically.
          # Reference - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications.html#cfn-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-instancetype
          #SubnetId:
            #Ref: Subnet1
          # Might want to look at this for pricing strategy.
          #WeightedCapacity: '8'
          SecurityGroups:
          - GroupId:
              Ref: MinerInstanceSSG
          # Look at this later.
          #WeightedCapacity: '8'
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              # Normally would start with an yum update -y && yum upgrade -y but these instances
              # are ephermeral and have no inbound ports open to 0.0.0.0/0. Although there
              # is still inherent risk waiting for instance to update is a waste of time.
              #
              # p2 GPU instances have some special optimizations to squeeze out a bit more performance.
              # Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/accelerated-computing-instances.html#optimize_gpu
              
              getgputype=$(nvidia-smi -q | grep 'Product Brand' | awk '{ print $4 }')
              if [ $getgputype == "Tesla" ];then
                nvidia-smi -pm 1
                nvidia-smi --auto-boost-default=0
                nvidia-smi -ac 2505,875
              else
                echo "Not a p2 instance."
              fi
              # First, get marlin Siacoin miner program. This miner will use the GPU.
              wget https://github.com/SiaMining/marlin/releases/download/v1.0.0/marlin-1.0.0-linux-amd64.tar.gz 
              tar -xvf marlin-1.0.0-linux-amd64.tar.gz
              # 
              # Next, prepare and make the Monero minerd miner. This miner will use the CPU.
              nocpus=$(cat /proc/cpuinfo | grep processor | wc -l)
              yum -y install git curl-devel libcurl glib-devel libtool
              git clone https://github.com/wolf9466/cpuminer-multi              
              cd cpuminer-multi
              ./autogen.sh
              CFLAGS="-march=native" ./configure
              make
              cd ..
              # Start both miners and redirect errors and output (&>>) to file for troubleshooting and/or referencing hashing statistics.
              ###############################################################
              # Instructions for Siamining here: https://siamining.com/help #
              ###############################################################
              nuhup siacoinminer=$(/marlin -H ${SiacoinMiningPool} -u ${SiaCoinAddr}.${WorkerName} -I ${MinerIntensity}) &>> SiaCoinHashingStats.txt &
              ###########################################################################################
              # Instructions for Monero mining at mineXMR.com here: http://minexmr.com/#getting_started #
              ###########################################################################################
              nuhup monerominer=$(/cpuminer-multi/minerd -a cryptonight -o stratum+tcp://${MoneroMiningPool} -u ${MoneroCoinAddr}.${WorkerName} -p x -t $nocpus) &>> MoneroHashingStats.txt &    
  MinerInstanceSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Access to Siacoin miner instance(s).
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
         Ref: SSHAccessIP
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: WorkerName
            - -MINER-SSH-ACCESS
      # As long as you have a default VPC, don't have to specify: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-vpcid
      VpcId:
        Ref: ChooseVPC
  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: WorkerName
              - -MINER-SPOT-FLEET-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
  MinerInstanceProfile:
    DependsOn:
    - MinerInstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: MinerInstanceRole
  MinerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: WorkerName
              - -MINER-INSTANCE-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
Outputs:
  SiaMiningStatistics:
    Description: See your mining statistics here 
    Value: !Join [ "", [ "https://siamining.com/addresses/", Ref: SiaCoinAddr ] ]
